name: Kernel Build (Hybrid)

on:
  workflow_dispatch:
    inputs:
      kernel_name:
        description: "Kernel Name"
        required: true
        default: "MIUI-A10-NOS"
      defconfig:
        description: "Defconfig"
        required: true
        default: "surya_defconfig"
      enable_experimental:
        description: "Enable Experimental Features (e.g. DEBUG_FS)"
        required: false
        default: "false"
      disable_debug:
        description: "Disable Debug Configs (e.g. DEBUG_INFO, DEBUG_KERNEL)"
        required: false
        default: "false"

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  BUILD_USER: fannndi
  BUILD_HOST: github
  CLANG_TRIPLE: aarch64-linux-gnu-

jobs:
  build:
    name: Compile Kernel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set Timezone & Vars
        run: |
          sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
          BUILD_TIME=$(date '+%d%m%Y-%H%M')
          BUILD_ID=$(date '+%Y%m%d%H%M%S')
          ZIPNAME="${{ github.event.inputs.kernel_name }}-Surya-${BUILD_TIME}.zip"
          COMMIT_HASH=$(git log --pretty=format:'%h - %s' -1)
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "ZIPNAME=$ZIPNAME" >> $GITHUB_ENV
          echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV
          echo "DISABLE_DEBUG=${{ github.event.inputs.disable_debug }}" >> $GITHUB_ENV
          echo "ENABLE_EXPERIMENTAL=${{ github.event.inputs.enable_experimental }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

      - name: Create Swap
        run: |
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            abootimg android-sdk-libsparse-utils bc binutils bison \
            build-essential ccache clang cmake cpio curl device-tree-compiler \
            flex gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi gettext git jq \
            kmod libelf-dev libfdt-dev liblz4-tool libncurses5-dev \
            libncursesw5-dev libssl-dev libudev-dev libxml2-utils libzstd-dev \
            llvm lsb-release lz4 lzop make nano ninja-build openssl patchutils \
            pigz protobuf-compiler python-is-python3 python3 python3-mako \
            python3-pip python3-virtualenv rsync unzip wget xz-utils zip zstd

      - name: Cache Clang
        uses: actions/cache@v3
        with:
          path: clang
          key: clang-cache-v1

      - name: Check & Download Clang
        run: |
          if [[ ! -f "clang/bin/clang" || ! -f "clang/bin/ld.lld" ]]; then
            echo "🔽 Downloading Clang..."
            mkdir -p clang
            wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android11-release/clang-r383902.tar.gz -O - | tar -xz -C clang
          fi
          echo "$GITHUB_WORKSPACE/clang/bin" >> $GITHUB_PATH
          echo "TOOLCHAIN_PATH=$GITHUB_WORKSPACE/clang" >> $GITHUB_ENV

      - name: Get Clang Version
        id: clang
        run: echo "version=$(clang/bin/clang --version | head -n1)" >> $GITHUB_OUTPUT

      - name: Clean Output Directory
        run: |
          echo "🧼 Cleaning build output..."
          rm -rf out dtb.img dtbo.img Image.gz-dtb AnyKernel3 *.zip log.txt

      - name: Telegram - Build Started
        run: |
          MSG="🚀 *Kernel Build Started!*\n"
          MSG+="━━━━━━━━━━━━━━━━━━━━━\n"
          MSG+="🆔 *ID:* \`${{ env.BUILD_ID }}\`\n"
          MSG+="📦 *Kernel:* \`${{ github.event.inputs.kernel_name }}\`\n"
          MSG+="🔖 *Commit:* \`${{ env.COMMIT_HASH }}\`\n"
          MSG+="🛠️ *Clang:* \`${{ steps.clang.outputs.version }}\`"
          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            -d text="$MSG" \
            -d parse_mode=Markdown

      - name: Make Defconfig
        run: |
          make O=out ARCH=arm64 ${{ github.event.inputs.defconfig }}
          make O=out ARCH=arm64 olddefconfig

      - name: Disable Debug Options
        if: ${{ github.event.inputs.disable_debug == 'true' }}
        run: |
          chmod +x scripts/config
          scripts/config --file out/.config --disable DEBUG_INFO
          scripts/config --file out/.config --disable DEBUG_KERNEL
          make O=out ARCH=arm64 olddefconfig

      - name: Enable Experimental Options
        if: ${{ github.event.inputs.enable_experimental == 'true' }}
        run: |
          chmod +x scripts/config
          scripts/config --file out/.config --enable CRYPTO_AES_ARM64_BS
          scripts/config --file out/.config --enable CRYPTO_CRC32_ARM64_CE
          scripts/config --file out/.config --enable CRYPTO_SHA512_ARM64
          scripts/config --file out/.config --enable CRYPTO_DRBG_HASH
          scripts/config --file out/.config --enable CRYPTO_DRBG_CTR
          scripts/config --file out/.config --enable CRYPTO_CHACHA20
          scripts/config --file out/.config --enable CRYPTO_SHA3
          scripts/config --file out/.config --enable CRYPTO_POLY1305
          scripts/config --file out/.config --enable CRYPTO_CHACHA20POLY1305
          make O=out ARCH=arm64 olddefconfig

      - name: Compile Kernel
        run: |
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export KBUILD_COMPILER_STRING="${{ steps.clang.outputs.version }}"
          JOBS=$(nproc)
          echo "🧱 Compiling with -j$JOBS"

          nice -n10 script -q -c "\
            make -j${JOBS} O=out \
              ARCH=arm64 \
              CC=clang \
              LD=ld.lld \
              AS=llvm-as \
              AR=llvm-ar \
              NM=llvm-nm \
              OBJCOPY=llvm-objcopy \
              OBJDUMP=llvm-objdump \
              STRIP=llvm-strip \
              CLANG_TRIPLE=${{ env.CLANG_TRIPLE }} \
              LLVM=1 \
              LLVM_IAS=1 \
              KBUILD_USE_RESPONSE_FILE=1 \
              KBUILD_VERBOSE=2 V=1 \
              KBUILD_BUILD_USER=${{ env.BUILD_USER }} \
              KBUILD_BUILD_HOST=${{ env.BUILD_HOST }} \
              Image.gz dtbs" | tee log.txt

          [[ -f out/arch/arm64/boot/Image.gz ]] || {
            echo "::error file=out/arch/arm64/boot/Image.gz::Missing kernel image!"
            exit 1
          }

      - name: Save Final .config Snapshot
        run: cp out/.config defconfig_snapshot.config

      - name: Telegram - Send Final .config Snapshot
        if: success()
        run: |
          curl -s -F document=@defconfig_snapshot.config \
            -F caption="🧾 Final .config Snapshot\n🆔 \`${{ env.BUILD_ID }}\`\n📦 \`${{ github.event.inputs.kernel_name }}\`" \
            -F chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendDocument

      - name: Prepare mkdtboimg.py Tool
        run: |
          mkdir -p tools
          if [[ ! -f tools/mkdtboimg.py ]]; then
            wget -qO - https://android.googlesource.com/platform/system/libufdt/+/refs/heads/main/utils/src/mkdtboimg.py?format=TEXT | base64 -d > tools/mkdtboimg.py
            chmod +x tools/mkdtboimg.py
          fi

      - name: Create Kernel Images
        run: |
          cat out/arch/arm64/boot/Image.gz out/arch/arm64/boot/dts/**/*.dtb > Image.gz-dtb
          find out/arch/arm64/boot/dts -name '*.dtb' | sort | xargs cat > dtb.img

          DTBO_FILES=$(find out/arch/arm64/boot/dts -name '*.dtbo')
          if [[ -n "$DTBO_FILES" ]]; then
            mkdir -p overlay
            cp $DTBO_FILES overlay/
            python3 tools/mkdtboimg.py create dtbo.img --page_size=4096 --id=0 overlay/*.dtbo
            rm -rf overlay
          else
            echo "⚠️ No .dtbo found, skipping dtbo.img"
          fi

      - name: Package with AnyKernel3
        run: |
          git clone --depth=1 https://github.com/rinnsakaguchi/AnyKernel3 -b FSociety
          cp Image.gz-dtb dtb.img dtbo.img AnyKernel3/ 2>/dev/null || true
          cd AnyKernel3 && zip -r9 ../${{ env.ZIPNAME }} ./* -x '*.git*' README.md *placeholder

      - name: Telegram - Build Success
        if: success()
        run: |
          DURATION=$(( $(date +%s) - ${{ env.BUILD_START }} ))
          MSG="✅ *Kernel Build Success!*\n"
          MSG+="━━━━━━━━━━━━━━━━━━━━━\n"
          MSG+="🆔 *ID:* \`${{ env.BUILD_ID }}\`\n"
          MSG+="📦 *Output:* \`${{ env.ZIPNAME }}\`\n"
          MSG+="🔖 *Commit:* \`${{ env.COMMIT_HASH }}\`\n"
          MSG+="🕒 *Duration:* ${DURATION}s\n"

          CHANGELOG=""
          if [[ "${{ env.DISABLE_DEBUG }}" == "true" ]]; then
            CHANGELOG+="• 🔧 Debug configs disabled (\\\`CONFIG_DEBUG_INFO=n\\\`, \\\`CONFIG_DEBUG_KERNEL=n\\\`)\n"
          fi
          if [[ "${{ env.ENABLE_EXPERIMENTAL }}" == "true" ]]; then
            CHANGELOG+="• 🧪 Experimental features enabled (e.g. \\\`CONFIG_DEBUG_FS\\\`)\n"
          fi
          if [[ -n "$CHANGELOG" ]]; then
            MSG+="\n📝 *Changes:*\n${CHANGELOG}"
          fi

          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            -d text="$MSG" \
            -d parse_mode=Markdown

          curl -s -F document=@${{ env.ZIPNAME }} \
            -F caption="✅ Kernel Zip" \
            -F chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendDocument

      - name: Telegram - Build Log (Success)
        if: success()
        run: |
          curl -s -F document=@log.txt \
            -F caption="📄 Build Log\n🆔 \`${{ env.BUILD_ID }}\`\n🛠️ Clang: \`${{ steps.clang.outputs.version }}\`" \
            -F chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendDocument

      - name: Telegram - Build Failed Log
        if: failure()
        run: |
          curl -s -F document=@log.txt \
            -F caption="❌ Build Failed Log\n🆔 \`${{ env.BUILD_ID }}\`\n🛠️ Clang: \`${{ steps.clang.outputs.version }}\`" \
            -F chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendDocument

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-outputs
          path: |
            log.txt
            out/.config
            defconfig_snapshot.config
            ${{ env.ZIPNAME }}

      - name: Show Final Info
        if: success()
        run: |
          echo "🕒 Duration: $(( $(date +%s) - ${{ env.BUILD_START }} ))s"
          du -sh "${{ env.ZIPNAME }}"
          sha1sum "${{ env.ZIPNAME }}"

      - name: Disable Swap
        if: always()
        run: sudo swapoff /swapfile
