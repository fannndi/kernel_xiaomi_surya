name: Kernel Build (Hybrid)

on:
  workflow_dispatch:
    inputs:
      kernel_name:
        description: "Kernel Name"
        required: true
        default: "MIUI-A10-LOS"
      defconfig:
        description: "Defconfig"
        required: true
        default: "surya_defconfig"
      enable_experimental:
        description: "Enable Experimental Features"
        required: false
        default: "false"
      disable_debug:
        description: "Disable Debug Configs"
        required: false
        default: "false"

env:
  BUILD_USER: fannndi
  BUILD_HOST: github
  HOSTCC: gcc-9
  HOSTCXX: g++-9
  CLANG_TRIPLE: aarch64-linux-gnu-
  ARCH: arm64
  SUBARCH: arm64

jobs:
  build:
    name: Compile Kernel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v3

      - name: Set Timezone & Vars
        run: |
          sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
          BUILD_TIME=$(date '+%d%m%Y-%H%M')
          BUILD_ID=$(date '+%Y%m%d%H%M%S')
          ZIPNAME="${{ github.event.inputs.kernel_name }}-Surya-${BUILD_TIME}.zip"
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "ZIPNAME=$ZIPNAME" >> $GITHUB_ENV
          echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV
          echo "DISABLE_DEBUG=${{ github.event.inputs.disable_debug }}" >> $GITHUB_ENV
          echo "ENABLE_EXPERIMENTAL=${{ github.event.inputs.enable_experimental }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(git log --pretty=format:'%h - %s' -1)" >> $GITHUB_ENV

      - name: Create Swap
        run: |
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            clang llvm gcc-9 g++-9 gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            abootimg android-sdk-libsparse-utils bc binutils bison build-essential \
            ccache cmake cpio curl device-tree-compiler flex gettext git jq kmod \
            libelf-dev libfdt-dev liblz4-tool libncurses5-dev libncursesw5-dev \
            libssl-dev libudev-dev libxml2-utils libzstd-dev lsb-release lz4 \
            lzop make nano ninja-build openssl patchutils pigz protobuf-compiler \
            python-is-python3 python3 python3-mako python3-pip python3-virtualenv \
            rsync unzip wget xz-utils zip zstd

      - name: Download Clang Android 15
        run: |
          if [[ ! -f "clang/bin/clang" ]]; then
            mkdir -p clang
            wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r536225.tar.gz -O - | tar -xz -C clang
          fi
          echo "$GITHUB_WORKSPACE/clang/bin" >> $GITHUB_PATH
          echo "TOOLCHAIN_PATH=$GITHUB_WORKSPACE/clang" >> $GITHUB_ENV

      - name: Show Clang Version
        id: clang_version
        run: echo "version=$(clang/bin/clang --version | head -n1)" >> $GITHUB_OUTPUT

      - name: Download GCC 9.3 Toolchain (aarch64)
        run: |
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-gnu-9.3 gcc9
          echo "$GITHUB_WORKSPACE/gcc9/bin" >> $GITHUB_PATH

      - name: Download GCC 4.9 Toolchain (arm-linux)
        run: |
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 gcc32
          echo "$GITHUB_WORKSPACE/gcc32/bin" >> $GITHUB_PATH

      - name: Clean Output Directory
        run: rm -rf out dtb.img Image.gz-dtb AnyKernel3 *.zip log.txt || true

      - name: Make Defconfig
        run: |
          export PATH="$GITHUB_WORKSPACE/clang/bin:$GITHUB_WORKSPACE/gcc9/bin:$GITHUB_WORKSPACE/gcc32/bin:$PATH"
          make O=out ARCH=arm64 SUBARCH=arm64 \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-androideabi- \
            CC=clang \
            ${{ github.event.inputs.defconfig }}
          make O=out ARCH=arm64 SUBARCH=arm64 CC=clang olddefconfig

      - name: Disable Stack Protector Strong (Fix clang error)
        run: |
          chmod +x scripts/config
          scripts/config --file out/.config --disable CC_STACKPROTECTOR_STRONG
          make O=out ARCH=arm64 SUBARCH=arm64 olddefconfig

      - name: Disable Debug Options
        if: ${{ env.DISABLE_DEBUG == 'true' }}
        run: |
          chmod +x scripts/config
          scripts/config --file out/.config --disable DEBUG_INFO
          make O=out ARCH=arm64 SUBARCH=arm64 olddefconfig

      - name: Enable Experimental Options
        if: ${{ env.ENABLE_EXPERIMENTAL == 'true' }}
        run: |
          chmod +x scripts/config
          scripts/config --file out/.config --enable DEBUG_FS
          make O=out ARCH=arm64 SUBARCH=arm64 olddefconfig

      - name: Patch DTC yylloc Conflict
        run: |
          echo 'HOSTCFLAGS_dtc-parser.tab.o += -DYYLTYPE_IS_DECLARED=1' >> scripts/dtc/Makefile
          cd scripts/dtc
          rm -f dtc-lexer.lex.c
          flex -o dtc-lexer.lex.c dtc-lexer.l

      - name: Compile Kernel
        run: |
          # Set PATH ke toolchain
          export PATH="$GITHUB_WORKSPACE/clang/bin:$GITHUB_WORKSPACE/gcc9/bin:$GITHUB_WORKSPACE/gcc32/bin:$PATH"

          # Export toolchain & metadata
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-
          export KBUILD_COMPILER_STRING="$($GITHUB_WORKSPACE/clang/bin/clang --version | head -n1)"
          export KBUILD_BUILD_USER="${BUILD_USER}"
          export KBUILD_BUILD_HOST="${BUILD_HOST}"
          unset AS

          # CPU core & parallelism
          JOBS=$(nproc --ignore=1)
          export MAKEFLAGS="-j$JOBS -Oline"

          # Logging
          echo "ðŸ”§ Using Clang: $KBUILD_COMPILER_STRING"
          echo "ðŸ§± Starting Kernel Build at $(date)"

          # Compile kernel
          nice -n10 make O=out \
            ARCH=arm64 SUBARCH=arm64 \
            CC=clang \
            LD=ld.lld \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            STRIP=llvm-strip \
            LLVM=1 LLVM_IAS=1 \
            KCFLAGS="-Wno-error" \
            KBUILD_VERBOSE=2 V=1 \
            Image.gz-dtb 2>&1 | tee log.txt

          echo "âœ… Kernel Build Completed at $(date)"

      - name: Save Final .config Snapshot
        run: cp out/.config defconfig_snapshot.config

      - name: Create Kernel Images
        run: |
          cat out/arch/arm64/boot/Image.gz out/arch/arm64/boot/dts/**/*.dtb > Image.gz-dtb
          find out/arch/arm64/boot/dts -name '*.dtb' | sort | xargs cat > dtb.img || true

      - name: Package with AnyKernel3
        run: |
          git clone --depth=1 https://github.com/rinnsakaguchi/AnyKernel3 -b FSociety
          cp Image.gz-dtb dtb.img AnyKernel3/ 2>/dev/null || true
          cd AnyKernel3 && zip -r9 ../${{ env.ZIPNAME }} . -x '*.git*' README.md *placeholder

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ env.BUILD_ID }}
          path: |
            log.txt
            out/.config
            defconfig_snapshot.config
            ${{ env.ZIPNAME }}

      - name: Show Final Info
        if: success()
        run: |
          echo "âœ… Build Finished!"
          echo "ðŸ•’ Duration: $(( $(date +%s) - ${{ env.BUILD_START }} ))s"
          du -sh "${{ env.ZIPNAME }}"
          sha1sum "${{ env.ZIPNAME }}"

      - name: Disable Swap
        if: always()
        run: sudo swapoff /swapfile
