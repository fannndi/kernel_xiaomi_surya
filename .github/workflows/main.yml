name: Kernel Build (A10 - Full LLVM + LD.bfd)

on:
  workflow_dispatch:
    inputs:
      kernel_name:
        description: "Kernel Name"
        required: true
        default: "MIUI-A10"
      defconfig:
        description: "Defconfig"
        required: true
        default: "surya_defconfig"

env:
  BUILD_USER: fannndi
  BUILD_HOST: github
  ARCH: arm64
  SUBARCH: arm64
  NDK_VERSION: r27d

jobs:
  build:
    name: Compile Kernel (A10)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v3

      - name: Set Vars
        run: |
          BUILD_TIME=$(date '+%d%m%Y-%H%M')
          BUILD_ID=$(date '+%Y%m%d%H%M%S')
          ZIPNAME="${{ github.event.inputs.kernel_name }}-Surya-${BUILD_TIME}.zip"
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "ZIPNAME=$ZIPNAME" >> $GITHUB_ENV
          echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Create Swap
        run: |
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            clang llvm \
            abootimg bc binutils bison build-essential \
            cpio curl device-tree-compiler flex git kmod \
            libelf-dev libfdt-dev liblz4-tool libncurses5-dev \
            libssl-dev lz4 lzop make openssl patchutils pigz \
            rsync unzip wget xz-utils zip zstd

      - name: Download Android NDK r27d
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip
          unzip -q android-ndk-${NDK_VERSION}-linux.zip
          mv android-ndk-${NDK_VERSION} ndk
          echo "$GITHUB_WORKSPACE/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/clang --version

      - name: Clean Output Directory
        run: rm -rf out dtb.img Image.gz-dtb AnyKernel3 *.zip log.txt || true

      - name: Make Defconfig
        run: |
          export PATH="$GITHUB_WORKSPACE/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          export LD=aarch64-linux-android-ld.bfd
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-
          export KCFLAGS="-Wno-error=array-bounds -Wno-array-bounds \
                          -Wno-error=address-of-packed-member \
                          -Wno-error=unused-function \
                          -Wno-error=shift-negative-value \
                          -Wno-error=maybe-uninitialized"
          export HOSTCFLAGS="$KCFLAGS"

          make O=out ARCH=arm64 \
            CROSS_COMPILE=$CROSS_COMPILE \
            CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32 \
            CC=clang \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip \
            LLVM=1 LLVM_IAS=1 \
            ${{ github.event.inputs.defconfig }}

      - name: Compile Kernel
        run: |
          export PATH="$GITHUB_WORKSPACE/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          export KBUILD_COMPILER_STRING="$($GITHUB_WORKSPACE/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/clang --version | head -n1)"
          export KBUILD_BUILD_USER="${BUILD_USER}"
          export KBUILD_BUILD_HOST="${BUILD_HOST}"
          export LD=aarch64-linux-android-ld.bfd
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-
          export KCFLAGS="-Wno-error=array-bounds -Wno-array-bounds \
                          -Wno-error=address-of-packed-member \
                          -Wno-error=unused-function \
                          -Wno-error=shift-negative-value \
                          -Wno-error=maybe-uninitialized"
          export HOSTCFLAGS="$KCFLAGS"
          JOBS=$(nproc --all)
          export MAKEFLAGS="-j$(( JOBS > 2 ? JOBS-1 : 2 )) -Oline"

          nice -n10 make O=out \
            ARCH=arm64 \
            CC=clang \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            LD=aarch64-linux-android-ld.bfd \
            AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip \
            CROSS_COMPILE=$CROSS_COMPILE \
            CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32 \
            LLVM=1 LLVM_IAS=1 \
            Image.gz-dtb 2>&1 | tee log.txt

          [ ${PIPESTATUS[0]} -eq 0 ] || { tail -n 50 log.txt; exit 1; }

      - name: Package with AnyKernel3
        run: |
          git clone --depth=1 https://github.com/rinnsakaguchi/AnyKernel3 -b FSociety
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3 && zip -r9 ../${{ env.ZIPNAME }} . -x '*.git*' README.md *placeholder

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ env.BUILD_ID }}
          path: |
            log.txt
            out/.config
            ${{ env.ZIPNAME }}
          if-no-files-found: warn

      - name: Disable Swap
        if: always()
        run: sudo swapoff /swapfile