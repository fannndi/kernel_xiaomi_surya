name: Kernel Build (A10)

on:
  workflow_dispatch:
    inputs:
      kernel_name:
        description: "Kernel Name"
        required: true
        default: "MIUI-A10"
      defconfig:
        description: "Defconfig"
        required: true
        default: "surya_defconfig"

env:
  BUILD_USER: fannndi
  BUILD_HOST: github
  ARCH: arm64
  SUBARCH: arm64
  CLANG_URL: https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android13-release/clang-r450784d.tar.gz
  NDK_URL: https://dl.google.com/android/repository/android-ndk-r22b-linux-x86_64.zip

jobs:
  build:
    name: Compile Kernel (A10)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v3

      # Cache Clang & NDK untuk mempercepat build berikutnya
      - name: Cache Toolchains
        uses: actions/cache@v4
        with:
          path: |
            clang
            ndk
          key: ${{ runner.os }}-toolchain-${{ env.CLANG_URL }}-${{ env.NDK_URL }}

      - name: Set Vars
        run: |
          BUILD_TIME=$(date '+%d%m%Y-%H%M')
          BUILD_ID=$(date '+%Y%m%d%H%M%S')
          GIT_HASH=$(git rev-parse --short HEAD)
          ZIPNAME="${{ github.event.inputs.kernel_name }}-Surya-${BUILD_TIME}-${GIT_HASH}.zip"
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "ZIPNAME=$ZIPNAME" >> $GITHUB_ENV

      - name: Create Swap
        run: |
          sudo fallocate -l 3G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            gcc-9 g++-9 \
            abootimg bc binutils bison build-essential \
            cpio curl device-tree-compiler flex git kmod \
            libelf-dev libfdt-dev liblz4-tool libncurses5-dev \
            libssl-dev lz4 lzop make openssl patchutils pigz \
            rsync unzip wget xz-utils zip zstd

      - name: Download Toolchains
        if: steps.cache-toolchains.outputs.cache-hit != 'true'
        run: |
          mkdir -p clang ndk
          wget -q $CLANG_URL -O - | tar -xz -C clang
          wget -q $NDK_URL -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r22b ndk
          echo "$GITHUB_WORKSPACE/clang/bin" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          clang/bin/clang --version
          ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ld.bfd --version

      - name: Clean Output Directory
        run: rm -rf out dtb.img Image.gz-dtb AnyKernel3 *.zip log.txt || true

      - name: Make Defconfig
        run: |
          export PATH="$GITHUB_WORKSPACE/clang/bin:$GITHUB_WORKSPACE/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          make O=out ARCH=arm64 \
            CROSS_COMPILE=aarch64-linux-android- \
            CROSS_COMPILE_ARM32=arm-linux-androideabi- \
            CC="clang --target=aarch64-linux-gnu" \
            HOSTCC="clang --target=x86_64-linux-gnu" \
            HOSTCXX="clang++ --target=x86_64-linux-gnu" \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            HOSTLD=ld \
            LD=$GITHUB_WORKSPACE/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ld.bfd \
            LLVM=1 LLVM_IAS=1 \
            AS=clang \
            ${{ github.event.inputs.defconfig }}

      - name: Compile Kernel
        run: |
          export PATH="$GITHUB_WORKSPACE/clang/bin:$GITHUB_WORKSPACE/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export LD=$GITHUB_WORKSPACE/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ld.bfd
          export AS=clang
          make -j$(nproc --all) O=out \
            ARCH=arm64 \
            CC="clang --target=aarch64-linux-gnu" \
            HOSTCC="clang --target=x86_64-linux-gnu" \
            HOSTCXX="clang++ --target=x86_64-linux-gnu" \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            HOSTLD=ld \
            LLVM=1 LLVM_IAS=1 \
            Image.gz-dtb 2>&1 | tee log.txt
          [ ${PIPESTATUS[0]} -eq 0 ] || { tail -n50 log.txt; exit 1; }

      - name: Package with AnyKernel3
        run: |
          git clone --depth=1 https://github.com/rinnsakaguchi/AnyKernel3 -b FSociety
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3 && zip -r9 ../${{ env.ZIPNAME }} . -x '*.git*' README.md *placeholder

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ env.BUILD_ID }}
          path: |
            log.txt
            out/.config
            ${{ env.ZIPNAME }}

      - name: Disable Swap
        if: always()
        run: sudo swapoff /swapfile
